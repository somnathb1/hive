// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package client

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	big "math/big"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(in *jlexer.Lexer, out *NethermindParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "networkID":
			out.NetworkID = int(in.Int())
		case "gasLimitBoundDivisor":
			out.GasLimitBoundDivisor = string(in.String())
		case "maximumExtraDataSize":
			out.MaximumExtraDataSize = string(in.String())
		case "maxCodeSize":
			out.MaxCodeSize = string(in.String())
		case "maxCodeSizeTransition":
			out.MaxCodeSizeTransition = string(in.String())
		case "minGasLimit":
			out.MinGasLimit = string(in.String())
		case "eip140Transition":
			out.Eip140Transition = string(in.String())
		case "eip211Transition":
			out.Eip211Transition = string(in.String())
		case "eip214Transition":
			out.Eip214Transition = string(in.String())
		case "eip658Transition":
			out.Eip658Transition = string(in.String())
		case "eip145Transition":
			out.Eip145Transition = string(in.String())
		case "eip1014Transition":
			out.Eip1014Transition = string(in.String())
		case "eip1052Transition":
			out.Eip1052Transition = string(in.String())
		case "eip1283Transition":
			out.Eip1283Transition = string(in.String())
		case "eip1344Transition":
			out.Eip1344Transition = string(in.String())
		case "eip1706Transition":
			out.Eip1706Transition = string(in.String())
		case "eip1884Transition":
			out.Eip1884Transition = string(in.String())
		case "eip2028Transition":
			out.Eip2028Transition = string(in.String())
		case "eip2929Transition":
			out.Eip2929Transition = string(in.String())
		case "eip2930Transition":
			out.Eip2930Transition = string(in.String())
		case "eip3198Transition":
			out.Eip3198Transition = string(in.String())
		case "eip3529Transition":
			out.Eip3529Transition = string(in.String())
		case "eip3541Transition":
			out.Eip3541Transition = string(in.String())
		case "eip1559Transition":
			out.Eip1559Transition = string(in.String())
		case "eip4895TransitionTimestamp":
			out.Eip4895TransitionTimestamp = string(in.String())
		case "eip3855TransitionTimestamp":
			out.Eip3855TransitionTimestamp = string(in.String())
		case "eip3651TransitionTimestamp":
			out.Eip3651TransitionTimestamp = string(in.String())
		case "eip3860TransitionTimestamp":
			out.Eip3860TransitionTimestamp = string(in.String())
		case "eip4844TransitionTimestamp":
			out.Eip4844TransitionTimestamp = string(in.String())
		case "eip4788TransitionTimestamp":
			out.Eip4788TransitionTimestamp = string(in.String())
		case "eip1153TransitionTimestamp":
			out.Eip1153TransitionTimestamp = string(in.String())
		case "eip5656TransitionTimestamp":
			out.Eip5656TransitionTimestamp = string(in.String())
		case "eip6780TransitionTimestamp":
			out.Eip6780TransitionTimestamp = string(in.String())
		case "eip4844BlobGasPriceUpdateFraction":
			out.Eip4844BlobGasPriceUpdateFraction = string(in.String())
		case "eip4844MaxBlobGasPerBlock":
			out.Eip4844MaxBlobGasPerBlock = string(in.String())
		case "eip4844MinBlobGasPrice":
			out.Eip4844MinBlobGasPrice = string(in.String())
		case "eip4844TargetBlobGasPerBlock":
			out.Eip4844TargetBlobGasPerBlock = string(in.String())
		case "eip1559BaseFeeMaxChangeDenominator":
			out.Eip1559BaseFeeMaxChangeDenominator = string(in.String())
		case "eip1559ElasticityMultiplier":
			out.Eip1559ElasticityMultiplier = string(in.String())
		case "eip1559FeeCollector":
			out.Eip1559FeeCollector = string(in.String())
		case "eip1559FeeCollectorTransition":
			out.Eip1559FeeCollectorTransition = int(in.Int())
		case "registrar":
			out.Registrar = string(in.String())
		case "transactionPermissionContract":
			out.TransactionPermissionContract = string(in.String())
		case "transactionPermissionContractTransition":
			out.TransactionPermissionContractTransition = string(in.String())
		case "terminalTotalDifficulty":
			out.TerminalTotalDifficulty = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(out *jwriter.Writer, in NethermindParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.NetworkID != 0 {
		const prefix string = ",\"networkID\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.NetworkID))
	}
	if in.GasLimitBoundDivisor != "" {
		const prefix string = ",\"gasLimitBoundDivisor\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GasLimitBoundDivisor))
	}
	if in.MaximumExtraDataSize != "" {
		const prefix string = ",\"maximumExtraDataSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaximumExtraDataSize))
	}
	if in.MaxCodeSize != "" {
		const prefix string = ",\"maxCodeSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaxCodeSize))
	}
	if in.MaxCodeSizeTransition != "" {
		const prefix string = ",\"maxCodeSizeTransition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MaxCodeSizeTransition))
	}
	if in.MinGasLimit != "" {
		const prefix string = ",\"minGasLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MinGasLimit))
	}
	if in.Eip140Transition != "" {
		const prefix string = ",\"eip140Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip140Transition))
	}
	if in.Eip211Transition != "" {
		const prefix string = ",\"eip211Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip211Transition))
	}
	if in.Eip214Transition != "" {
		const prefix string = ",\"eip214Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip214Transition))
	}
	if in.Eip658Transition != "" {
		const prefix string = ",\"eip658Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip658Transition))
	}
	if in.Eip145Transition != "" {
		const prefix string = ",\"eip145Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip145Transition))
	}
	if in.Eip1014Transition != "" {
		const prefix string = ",\"eip1014Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1014Transition))
	}
	if in.Eip1052Transition != "" {
		const prefix string = ",\"eip1052Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1052Transition))
	}
	if in.Eip1283Transition != "" {
		const prefix string = ",\"eip1283Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1283Transition))
	}
	if in.Eip1344Transition != "" {
		const prefix string = ",\"eip1344Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1344Transition))
	}
	if in.Eip1706Transition != "" {
		const prefix string = ",\"eip1706Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1706Transition))
	}
	if in.Eip1884Transition != "" {
		const prefix string = ",\"eip1884Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1884Transition))
	}
	if in.Eip2028Transition != "" {
		const prefix string = ",\"eip2028Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip2028Transition))
	}
	if in.Eip2929Transition != "" {
		const prefix string = ",\"eip2929Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip2929Transition))
	}
	if in.Eip2930Transition != "" {
		const prefix string = ",\"eip2930Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip2930Transition))
	}
	if in.Eip3198Transition != "" {
		const prefix string = ",\"eip3198Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3198Transition))
	}
	if in.Eip3529Transition != "" {
		const prefix string = ",\"eip3529Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3529Transition))
	}
	if in.Eip3541Transition != "" {
		const prefix string = ",\"eip3541Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3541Transition))
	}
	if in.Eip1559Transition != "" {
		const prefix string = ",\"eip1559Transition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1559Transition))
	}
	if in.Eip4895TransitionTimestamp != "" {
		const prefix string = ",\"eip4895TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip4895TransitionTimestamp))
	}
	if in.Eip3855TransitionTimestamp != "" {
		const prefix string = ",\"eip3855TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3855TransitionTimestamp))
	}
	if in.Eip3651TransitionTimestamp != "" {
		const prefix string = ",\"eip3651TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3651TransitionTimestamp))
	}
	if in.Eip3860TransitionTimestamp != "" {
		const prefix string = ",\"eip3860TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip3860TransitionTimestamp))
	}
	if in.Eip4844TransitionTimestamp != "" {
		const prefix string = ",\"eip4844TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip4844TransitionTimestamp))
	}
	if in.Eip4788TransitionTimestamp != "" {
		const prefix string = ",\"eip4788TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip4788TransitionTimestamp))
	}
	if in.Eip1153TransitionTimestamp != "" {
		const prefix string = ",\"eip1153TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip1153TransitionTimestamp))
	}
	if in.Eip5656TransitionTimestamp != "" {
		const prefix string = ",\"eip5656TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip5656TransitionTimestamp))
	}
	if in.Eip6780TransitionTimestamp != "" {
		const prefix string = ",\"eip6780TransitionTimestamp\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip6780TransitionTimestamp))
	}
	{
		const prefix string = ",\"eip4844BlobGasPriceUpdateFraction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Eip4844BlobGasPriceUpdateFraction))
	}
	{
		const prefix string = ",\"eip4844MaxBlobGasPerBlock\":"
		out.RawString(prefix)
		out.String(string(in.Eip4844MaxBlobGasPerBlock))
	}
	{
		const prefix string = ",\"eip4844MinBlobGasPrice\":"
		out.RawString(prefix)
		out.String(string(in.Eip4844MinBlobGasPrice))
	}
	{
		const prefix string = ",\"eip4844TargetBlobGasPerBlock\":"
		out.RawString(prefix)
		out.String(string(in.Eip4844TargetBlobGasPerBlock))
	}
	if in.Eip1559BaseFeeMaxChangeDenominator != "" {
		const prefix string = ",\"eip1559BaseFeeMaxChangeDenominator\":"
		out.RawString(prefix)
		out.String(string(in.Eip1559BaseFeeMaxChangeDenominator))
	}
	if in.Eip1559ElasticityMultiplier != "" {
		const prefix string = ",\"eip1559ElasticityMultiplier\":"
		out.RawString(prefix)
		out.String(string(in.Eip1559ElasticityMultiplier))
	}
	if in.Eip1559FeeCollector != "" {
		const prefix string = ",\"eip1559FeeCollector\":"
		out.RawString(prefix)
		out.String(string(in.Eip1559FeeCollector))
	}
	if in.Eip1559FeeCollectorTransition != 0 {
		const prefix string = ",\"eip1559FeeCollectorTransition\":"
		out.RawString(prefix)
		out.Int(int(in.Eip1559FeeCollectorTransition))
	}
	if in.Registrar != "" {
		const prefix string = ",\"registrar\":"
		out.RawString(prefix)
		out.String(string(in.Registrar))
	}
	if in.TransactionPermissionContract != "" {
		const prefix string = ",\"transactionPermissionContract\":"
		out.RawString(prefix)
		out.String(string(in.TransactionPermissionContract))
	}
	if in.TransactionPermissionContractTransition != "" {
		const prefix string = ",\"transactionPermissionContractTransition\":"
		out.RawString(prefix)
		out.String(string(in.TransactionPermissionContractTransition))
	}
	if in.TerminalTotalDifficulty != "" {
		const prefix string = ",\"terminalTotalDifficulty\":"
		out.RawString(prefix)
		out.String(string(in.TerminalTotalDifficulty))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NethermindParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NethermindParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NethermindParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NethermindParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(in *jlexer.Lexer, out *NethermindGenesis) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seal":
			easyjson3d34c335Decode(in, &out.Seal)
		case "baseFeePerGas":
			out.BaseFeePerGas = string(in.String())
		case "difficulty":
			out.Difficulty = string(in.String())
		case "gasLimit":
			out.GasLimit = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(out *jwriter.Writer, in NethermindGenesis) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"seal\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3d34c335Encode(out, in.Seal)
	}
	if in.BaseFeePerGas != "" {
		const prefix string = ",\"baseFeePerGas\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BaseFeePerGas))
	}
	if in.Difficulty != "" {
		const prefix string = ",\"difficulty\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Difficulty))
	}
	if in.GasLimit != "" {
		const prefix string = ",\"gasLimit\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.GasLimit))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NethermindGenesis) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NethermindGenesis) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NethermindGenesis) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NethermindGenesis) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper1(l, v)
}
func easyjson3d34c335Decode(in *jlexer.Lexer, out *struct {
	AuthorityRound struct {
		Step      string `json:"step,omitempty"`
		Signature string `json:"signature,omitempty"`
	} `json:"authorityRound,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authorityRound":
			easyjson3d34c335Decode1(in, &out.AuthorityRound)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335Encode(out *jwriter.Writer, in struct {
	AuthorityRound struct {
		Step      string `json:"step,omitempty"`
		Signature string `json:"signature,omitempty"`
	} `json:"authorityRound,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"authorityRound\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3d34c335Encode1(out, in.AuthorityRound)
	}
	out.RawByte('}')
}
func easyjson3d34c335Decode1(in *jlexer.Lexer, out *struct {
	Step      string `json:"step,omitempty"`
	Signature string `json:"signature,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "step":
			out.Step = string(in.String())
		case "signature":
			out.Signature = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335Encode1(out *jwriter.Writer, in struct {
	Step      string `json:"step,omitempty"`
	Signature string `json:"signature,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Step != "" {
		const prefix string = ",\"step\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Step))
	}
	if in.Signature != "" {
		const prefix string = ",\"signature\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Signature))
	}
	out.RawByte('}')
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(in *jlexer.Lexer, out *NethermindEngine) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "authorityRound":
			easyjson3d34c335Decode2(in, &out.AuthorityRound)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(out *jwriter.Writer, in NethermindEngine) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"authorityRound\":"
		first = false
		out.RawString(prefix[1:])
		easyjson3d34c335Encode2(out, in.AuthorityRound)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NethermindEngine) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NethermindEngine) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NethermindEngine) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NethermindEngine) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper2(l, v)
}
func easyjson3d34c335Decode2(in *jlexer.Lexer, out *struct {
	Params AuthorityParams `json:"params,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335Encode2(out *jwriter.Writer, in struct {
	Params AuthorityParams `json:"params,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"params\":"
		first = false
		out.RawString(prefix[1:])
		(in.Params).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(in *jlexer.Lexer, out *NethermindChainSpec) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "engine":
			(out.Engine).UnmarshalEasyJSON(in)
		case "params":
			(out.Params).UnmarshalEasyJSON(in)
		case "genesis":
			(out.Genesis).UnmarshalEasyJSON(in)
		case "accounts":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Accounts = make(map[string]Account)
				} else {
					out.Accounts = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 Account
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v1 = make(Account)
						} else {
							v1 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v2 interface{}
							if m, ok := v2.(easyjson.Unmarshaler); ok {
								m.UnmarshalEasyJSON(in)
							} else if m, ok := v2.(json.Unmarshaler); ok {
								_ = m.UnmarshalJSON(in.Raw())
							} else {
								v2 = in.Interface()
							}
							(v1)[key] = v2
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Accounts)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(out *jwriter.Writer, in NethermindChainSpec) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if true {
		const prefix string = ",\"engine\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Engine).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"params\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Params).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"genesis\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Genesis).MarshalEasyJSON(out)
	}
	if len(in.Accounts) != 0 {
		const prefix string = ",\"accounts\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Accounts {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if v3Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v4First := true
					for v4Name, v4Value := range v3Value {
						if v4First {
							v4First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v4Name))
						out.RawByte(':')
						if m, ok := v4Value.(easyjson.Marshaler); ok {
							m.MarshalEasyJSON(out)
						} else if m, ok := v4Value.(json.Marshaler); ok {
							out.Raw(m.MarshalJSON())
						} else {
							out.Raw(json.Marshal(v4Value))
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NethermindChainSpec) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NethermindChainSpec) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NethermindChainSpec) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NethermindChainSpec) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper3(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(in *jlexer.Lexer, out *ErigonGenesis) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "config":
			(out.ErigonConfig).UnmarshalEasyJSON(in)
		case "auRaSeal":
			out.AuRaSeal = string(in.String())
		case "gasLimit":
			out.ErigonGasLimit = string(in.String())
		case "difficulty":
			out.ErigonDifficulty = string(in.String())
		case "alloc":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ErigonAlloc = make(map[string]ErigonAccount)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 ErigonAccount
					(v5).UnmarshalEasyJSON(in)
					(out.ErigonAlloc)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(out *jwriter.Writer, in ErigonGenesis) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"config\":"
		out.RawString(prefix[1:])
		(in.ErigonConfig).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"auRaSeal\":"
		out.RawString(prefix)
		out.String(string(in.AuRaSeal))
	}
	{
		const prefix string = ",\"gasLimit\":"
		out.RawString(prefix)
		out.String(string(in.ErigonGasLimit))
	}
	{
		const prefix string = ",\"difficulty\":"
		out.RawString(prefix)
		out.String(string(in.ErigonDifficulty))
	}
	{
		const prefix string = ",\"alloc\":"
		out.RawString(prefix)
		if in.ErigonAlloc == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.ErigonAlloc {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				(v6Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErigonGenesis) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErigonGenesis) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErigonGenesis) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErigonGenesis) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper4(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(in *jlexer.Lexer, out *ErigonConfig) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ChainName":
			out.ChainName = string(in.String())
		case "chainId":
			out.ChainID = int(in.Int())
		case "consensus":
			out.Consensus = string(in.String())
		case "homesteadBlock":
			out.HomesteadBlock = int(in.Int())
		case "eip150Block":
			out.Eip150Block = int(in.Int())
		case "eip155Block":
			out.Eip155Block = int(in.Int())
		case "byzantiumBlock":
			out.ByzantiumBlock = int(in.Int())
		case "constantinopleBlock":
			out.ConstantinopleBlock = int(in.Int())
		case "petersburgBlock":
			out.PetersburgBlock = int(in.Int())
		case "istanbulBlock":
			out.IstanbulBlock = int(in.Int())
		case "berlinBlock":
			out.BerlinBlock = int(in.Int())
		case "londonBlock":
			out.LondonBlock = int(in.Int())
		case "eip1559FeeCollectorTransition":
			out.Eip1559FeeCollectorTransition = int(in.Int())
		case "eip1559FeeCollector":
			out.Eip1559FeeCollector = string(in.String())
		case "terminalTotalDifficulty":
			if in.IsNull() {
				in.Skip()
				out.TerminalTotalDifficulty = nil
			} else {
				if out.TerminalTotalDifficulty == nil {
					out.TerminalTotalDifficulty = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.TerminalTotalDifficulty).UnmarshalJSON(data))
				}
			}
		case "terminalTotalDifficultyPassed":
			out.TerminalTotalDifficultyPassed = bool(in.Bool())
		case "shanghaiTime":
			if in.IsNull() {
				in.Skip()
				out.ShanghaiTimestamp = nil
			} else {
				if out.ShanghaiTimestamp == nil {
					out.ShanghaiTimestamp = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShanghaiTimestamp).UnmarshalJSON(data))
				}
			}
		case "cancunTime":
			if in.IsNull() {
				in.Skip()
				out.CancunTime = nil
			} else {
				if out.CancunTime == nil {
					out.CancunTime = new(big.Int)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CancunTime).UnmarshalJSON(data))
				}
			}
		case "minBlobGasPrice":
			out.MinBlobGasPrice = int(in.Int())
		case "maxBlobGasPerBlock":
			out.MaxBlobGasPerBlock = int(in.Int())
		case "targetBlobGasPerBlock":
			out.TargetBlobGasPerBlock = int(in.Int())
		case "blobGasPriceUpdateFraction":
			out.BlobGasPriceUpdateFraction = int(in.Int())
		case "aura":
			(out.Aura).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(out *jwriter.Writer, in ErigonConfig) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ChainName\":"
		out.RawString(prefix[1:])
		out.String(string(in.ChainName))
	}
	{
		const prefix string = ",\"chainId\":"
		out.RawString(prefix)
		out.Int(int(in.ChainID))
	}
	{
		const prefix string = ",\"consensus\":"
		out.RawString(prefix)
		out.String(string(in.Consensus))
	}
	{
		const prefix string = ",\"homesteadBlock\":"
		out.RawString(prefix)
		out.Int(int(in.HomesteadBlock))
	}
	{
		const prefix string = ",\"eip150Block\":"
		out.RawString(prefix)
		out.Int(int(in.Eip150Block))
	}
	{
		const prefix string = ",\"eip155Block\":"
		out.RawString(prefix)
		out.Int(int(in.Eip155Block))
	}
	{
		const prefix string = ",\"byzantiumBlock\":"
		out.RawString(prefix)
		out.Int(int(in.ByzantiumBlock))
	}
	{
		const prefix string = ",\"constantinopleBlock\":"
		out.RawString(prefix)
		out.Int(int(in.ConstantinopleBlock))
	}
	{
		const prefix string = ",\"petersburgBlock\":"
		out.RawString(prefix)
		out.Int(int(in.PetersburgBlock))
	}
	{
		const prefix string = ",\"istanbulBlock\":"
		out.RawString(prefix)
		out.Int(int(in.IstanbulBlock))
	}
	{
		const prefix string = ",\"berlinBlock\":"
		out.RawString(prefix)
		out.Int(int(in.BerlinBlock))
	}
	{
		const prefix string = ",\"londonBlock\":"
		out.RawString(prefix)
		out.Int(int(in.LondonBlock))
	}
	{
		const prefix string = ",\"eip1559FeeCollectorTransition\":"
		out.RawString(prefix)
		out.Int(int(in.Eip1559FeeCollectorTransition))
	}
	{
		const prefix string = ",\"eip1559FeeCollector\":"
		out.RawString(prefix)
		out.String(string(in.Eip1559FeeCollector))
	}
	{
		const prefix string = ",\"terminalTotalDifficulty\":"
		out.RawString(prefix)
		if in.TerminalTotalDifficulty == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.TerminalTotalDifficulty).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"terminalTotalDifficultyPassed\":"
		out.RawString(prefix)
		out.Bool(bool(in.TerminalTotalDifficultyPassed))
	}
	{
		const prefix string = ",\"shanghaiTime\":"
		out.RawString(prefix)
		if in.ShanghaiTimestamp == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShanghaiTimestamp).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"cancunTime\":"
		out.RawString(prefix)
		if in.CancunTime == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CancunTime).MarshalJSON())
		}
	}
	{
		const prefix string = ",\"minBlobGasPrice\":"
		out.RawString(prefix)
		out.Int(int(in.MinBlobGasPrice))
	}
	{
		const prefix string = ",\"maxBlobGasPerBlock\":"
		out.RawString(prefix)
		out.Int(int(in.MaxBlobGasPerBlock))
	}
	{
		const prefix string = ",\"targetBlobGasPerBlock\":"
		out.RawString(prefix)
		out.Int(int(in.TargetBlobGasPerBlock))
	}
	{
		const prefix string = ",\"blobGasPriceUpdateFraction\":"
		out.RawString(prefix)
		out.Int(int(in.BlobGasPriceUpdateFraction))
	}
	{
		const prefix string = ",\"aura\":"
		out.RawString(prefix)
		(in.Aura).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErigonConfig) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErigonConfig) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErigonConfig) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErigonConfig) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper5(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(in *jlexer.Lexer, out *ErigonAura) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stepDuration":
			out.StepDuration = int(in.Int())
		case "blockReward":
			out.BlockReward = int(in.Int())
		case "maximumUncleCountTransition":
			out.MaximumUncleCountTransition = int(in.Int())
		case "maximumUncleCount":
			out.MaximumUncleCount = int(in.Int())
		case "validators":
			easyjson3d34c335Decode3(in, &out.Validators)
		case "blockRewardContractAddress":
			out.BlockRewardContractAddress = string(in.String())
		case "blockRewardContractTransition":
			out.BlockRewardContractTransition = int(in.Int())
		case "randomnessContractAddress":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.RandomnessContractAddress = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.RandomnessContractAddress)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "posdaoTransition":
			out.PosdaoTransition = int(in.Int())
		case "blockGasLimitContractTransitions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.BlockGasLimitContractTransitions = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.BlockGasLimitContractTransitions)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "registrar":
			out.Registrar = string(in.String())
		case "withdrawalContractAddress":
			out.WithdrawalContractAddress = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(out *jwriter.Writer, in ErigonAura) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"stepDuration\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StepDuration))
	}
	{
		const prefix string = ",\"blockReward\":"
		out.RawString(prefix)
		out.Int(int(in.BlockReward))
	}
	{
		const prefix string = ",\"maximumUncleCountTransition\":"
		out.RawString(prefix)
		out.Int(int(in.MaximumUncleCountTransition))
	}
	{
		const prefix string = ",\"maximumUncleCount\":"
		out.RawString(prefix)
		out.Int(int(in.MaximumUncleCount))
	}
	{
		const prefix string = ",\"validators\":"
		out.RawString(prefix)
		easyjson3d34c335Encode3(out, in.Validators)
	}
	{
		const prefix string = ",\"blockRewardContractAddress\":"
		out.RawString(prefix)
		out.String(string(in.BlockRewardContractAddress))
	}
	{
		const prefix string = ",\"blockRewardContractTransition\":"
		out.RawString(prefix)
		out.Int(int(in.BlockRewardContractTransition))
	}
	{
		const prefix string = ",\"randomnessContractAddress\":"
		out.RawString(prefix)
		if in.RandomnessContractAddress == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v9First := true
			for v9Name, v9Value := range in.RandomnessContractAddress {
				if v9First {
					v9First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v9Name))
				out.RawByte(':')
				out.String(string(v9Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"posdaoTransition\":"
		out.RawString(prefix)
		out.Int(int(in.PosdaoTransition))
	}
	{
		const prefix string = ",\"blockGasLimitContractTransitions\":"
		out.RawString(prefix)
		if in.BlockGasLimitContractTransitions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.BlockGasLimitContractTransitions {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"registrar\":"
		out.RawString(prefix)
		out.String(string(in.Registrar))
	}
	{
		const prefix string = ",\"withdrawalContractAddress\":"
		out.RawString(prefix)
		out.String(string(in.WithdrawalContractAddress))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErigonAura) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErigonAura) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErigonAura) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErigonAura) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper6(l, v)
}
func easyjson3d34c335Decode3(in *jlexer.Lexer, out *struct {
	Multi map[string]map[string][]string `json:"multi,omitempty"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "multi":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Multi = make(map[string]map[string][]string)
				} else {
					out.Multi = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v11 map[string][]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v11 = make(map[string][]string)
						} else {
							v11 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v12 []string
							if in.IsNull() {
								in.Skip()
								v12 = nil
							} else {
								in.Delim('[')
								if v12 == nil {
									if !in.IsDelim(']') {
										v12 = make([]string, 0, 4)
									} else {
										v12 = []string{}
									}
								} else {
									v12 = (v12)[:0]
								}
								for !in.IsDelim(']') {
									var v13 string
									v13 = string(in.String())
									v12 = append(v12, v13)
									in.WantComma()
								}
								in.Delim(']')
							}
							(v11)[key] = v12
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.Multi)[key] = v11
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335Encode3(out *jwriter.Writer, in struct {
	Multi map[string]map[string][]string `json:"multi,omitempty"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Multi) != 0 {
		const prefix string = ",\"multi\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('{')
			v14First := true
			for v14Name, v14Value := range in.Multi {
				if v14First {
					v14First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v14Name))
				out.RawByte(':')
				if v14Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v15First := true
					for v15Name, v15Value := range v14Value {
						if v15First {
							v15First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v15Name))
						out.RawByte(':')
						if v15Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v16, v17 := range v15Value {
								if v16 > 0 {
									out.RawByte(',')
								}
								out.String(string(v17))
							}
							out.RawByte(']')
						}
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(in *jlexer.Lexer, out *ErigonAccount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "balance":
			out.Balance = string(in.String())
		case "constructor":
			out.Constructor = string(in.String())
		case "code":
			out.Code = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(out *jwriter.Writer, in ErigonAccount) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"balance\":"
		out.RawString(prefix[1:])
		out.String(string(in.Balance))
	}
	if in.Constructor != "" {
		const prefix string = ",\"constructor\":"
		out.RawString(prefix)
		out.String(string(in.Constructor))
	}
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.String(string(in.Code))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErigonAccount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErigonAccount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErigonAccount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErigonAccount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper7(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(in *jlexer.Lexer, out *Builtin) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "pricing":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Pricing = make(map[string]interface{})
				} else {
					out.Pricing = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v18 interface{}
					if m, ok := v18.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v18.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v18 = in.Interface()
					}
					(out.Pricing)[key] = v18
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(out *jwriter.Writer, in Builtin) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Pricing) != 0 {
		const prefix string = ",\"pricing\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.Pricing {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				if m, ok := v19Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v19Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v19Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Builtin) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Builtin) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Builtin) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Builtin) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper8(l, v)
}
func easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(in *jlexer.Lexer, out *AuthorityParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "stepDuration":
			out.StepDuration = int(in.Int())
		case "blockReward":
			out.BlockReward = string(in.String())
		case "maximumUncleCountTransition":
			out.MaximumUncleCountTransition = int(in.Int())
		case "maximumUncleCount":
			out.MaximumUncleCount = int(in.Int())
		case "validators":
			easyjson3d34c335Decode3(in, &out.Validators)
		case "blockRewardContractAddress":
			out.BlockRewardContractAddress = string(in.String())
		case "blockRewardContractTransition":
			out.BlockRewardContractTransition = int(in.Int())
		case "randomnessContractAddress":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.RandomnessContractAddress = make(map[string]string)
				} else {
					out.RandomnessContractAddress = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v20 string
					v20 = string(in.String())
					(out.RandomnessContractAddress)[key] = v20
					in.WantComma()
				}
				in.Delim('}')
			}
		case "withdrawalContractAddress":
			out.WithdrawalContractAddress = string(in.String())
		case "twoThirdsMajorityTransition":
			out.TwoThirdsMajorityTransition = int(in.Int())
		case "posdaoTransition":
			out.PosdaoTransition = int(in.Int())
		case "blockGasLimitContractTransitions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BlockGasLimitContractTransitions = make(map[string]string)
				} else {
					out.BlockGasLimitContractTransitions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 string
					v21 = string(in.String())
					(out.BlockGasLimitContractTransitions)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(out *jwriter.Writer, in AuthorityParams) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StepDuration != 0 {
		const prefix string = ",\"stepDuration\":"
		first = false
		out.RawString(prefix[1:])
		out.Int(int(in.StepDuration))
	}
	if in.BlockReward != "" {
		const prefix string = ",\"blockReward\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockReward))
	}
	if in.MaximumUncleCountTransition != 0 {
		const prefix string = ",\"maximumUncleCountTransition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaximumUncleCountTransition))
	}
	if in.MaximumUncleCount != 0 {
		const prefix string = ",\"maximumUncleCount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.MaximumUncleCount))
	}
	if true {
		const prefix string = ",\"validators\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson3d34c335Encode3(out, in.Validators)
	}
	if in.BlockRewardContractAddress != "" {
		const prefix string = ",\"blockRewardContractAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.BlockRewardContractAddress))
	}
	if in.BlockRewardContractTransition != 0 {
		const prefix string = ",\"blockRewardContractTransition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.BlockRewardContractTransition))
	}
	if len(in.RandomnessContractAddress) != 0 {
		const prefix string = ",\"randomnessContractAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v22First := true
			for v22Name, v22Value := range in.RandomnessContractAddress {
				if v22First {
					v22First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v22Name))
				out.RawByte(':')
				out.String(string(v22Value))
			}
			out.RawByte('}')
		}
	}
	if in.WithdrawalContractAddress != "" {
		const prefix string = ",\"withdrawalContractAddress\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.WithdrawalContractAddress))
	}
	if in.TwoThirdsMajorityTransition != 0 {
		const prefix string = ",\"twoThirdsMajorityTransition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.TwoThirdsMajorityTransition))
	}
	if in.PosdaoTransition != 0 {
		const prefix string = ",\"posdaoTransition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.PosdaoTransition))
	}
	if len(in.BlockGasLimitContractTransitions) != 0 {
		const prefix string = ",\"blockGasLimitContractTransitions\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v23First := true
			for v23Name, v23Value := range in.BlockGasLimitContractTransitions {
				if v23First {
					v23First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v23Name))
				out.RawByte(':')
				out.String(string(v23Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthorityParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthorityParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3d34c335EncodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthorityParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthorityParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3d34c335DecodeGithubComEthereumHiveSimulatorsEthereumEngineHelper9(l, v)
}
